CREATE TABLE client
(
	client_number integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	client_firstname varchar(50) NOT NULL,
	client_surname varchar(50) NOT NULL,
	client_lastname varchar(50) NOT NULL,
	client_phone numeric(11) NOT NULL UNIQUE,
	client_email varchar(30) NOT NULL UNIQUE,
	client_address text NOT NULL,
	client_date_birthday date NOT NULL
);

CREATE TABLE sports_group
(
	group_number integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	group_name varchar(50) NOT NULL,
	group_type varchar(50) NOT NULL
);

CREATE TABLE client_group_table
(
	group_number integer NOT NULL REFERENCES sports_group(group_number),
	client_number integer NOT NULL REFERENCES client(client_number),
	PRIMARY KEY(group_number, client_number)
);

CREATE TABLE position_emp
(
	position_number smallint PRIMARY KEY,
	position_name varchar(50) NOT NULL
);

CREATE TABLE employee
(
	employee_number integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	employee_firstname varchar(50) NOT NULL,
	employee_surname varchar(50) NOT NULL,
	employee_lastname varchar(50),
	employee_email varchar(40) NOT NULL UNIQUE,
	employee_phone numeric(11) NOT NULL UNIQUE,
	employee_login varchar(30) NOT NULL UNIQUE,
	employee_password text NOT NULL,
	employee_expirience smallint NOT NULL,
	position_number smallint NOT NULL REFERENCES position_emp(position_number)
);

CREATE TABLE training
(
	training_number integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	start_time timestamp NOT NULL,
	finish_time timestamp NOT NULL,
	status BOOLEAN NOT NULL DEFAULT FALSE,
	training_name varchar(50) NOT NULL,
	group_number smallint REFERENCES sports_group(group_number),
	trainer_number smallint REFERENCES employee(employee_number)
);

CREATE TABLE sport_equipment
(
	sport_equip_number integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	sport_equip_name varchar(70) NOT NULL,
	sport_equip_vendore_code integer NOT NULL,
	sport_equip_amount smallint NOT NULL
);

CREATE TABLE sport_equip_training
(
	sport_equip_number integer NOT NULL REFERENCES sport_equipment(sport_equip_number),
	training_number integer NOT NULL REFERENCES training(training_number),
	PRIMARY KEY(sport_equip_number, training_number)
);

-- РОЛИ --
CREATE ROLE manager;
CREATE ROLE trainer;
CREATE ROLE administrator;

-- Необходимо для того, чтобы созданные политики действовали
ALTER TABLE employee ENABLE ROW LEVEL SECURITY;
ALTER TABLE sport_equipment ENABLE ROW LEVEL SECURITY;
ALTER TABLE sport_equip_training ENABLE ROW LEVEL SECURITY;
ALTER TABLE position_emp ENABLE ROW LEVEL SECURITY;
ALTER TABLE training ENABLE ROW LEVEL SECURITY;

-- Выдаются все привилегии администратору
GRANT ALL ON ALL TABLES IN SCHEMA public TO administrator;
GRANT ALL ON ALL FUNCTIONS IN SCHEMA public TO administrator;
GRANT ALL ON ALL PROCEDURES IN SCHEMA public TO administrator;

CREATE POLICY admin_privilegies_sel ON training
	FOR SELECT
	TO administrator
	USING (true);

CREATE POLICY admin_privilegies_del ON training
	FOR DELETE
	TO administrator
	USING(true);

--политика на добавление данных в промежуточ таблицу тренировки и инвентаря
CREATE POLICY admin_privilegies_ins ON training
	FOR INSERT
	TO administrator
	WITH CHECK (true);

CREATE POLICY edit_train ON training
	FOR UPDATE TO administrator
	USING (true)
	WITH CHECK (status =false);

CREATE POLICY admin_privilegies ON employee
	FOR ALL TO administrator
	USING (true)
	WITH CHECK (true);

CREATE POLICY admin_privilegies ON position_emp
	FOR ALL TO administrator
	USING (true)
	WITH CHECK (true);

CREATE POLICY admin_privilegies ON sport_equipment
	FOR ALL TO administrator
	USING (true)
	WITH CHECK (true);

CREATE POLICY admin_privilegies ON sport_equip_training
	FOR ALL TO administrator
	USING (true)
	WITH CHECK (true);

/*общие политики и привелегии*/
GRANT DELETE ON training, sport_equip_training
	TO manager, trainer;

CREATE POLICY browse_position ON position_emp
	FOR SELECT
	TO manager,trainer
	USING (true);

/*политики и гранты менеджера*/
GRANT SELECT ON training, sports_group, employee,sport_equip_training, sport_equipment, position_emp TO manager;

GRANT UPDATE (start_time, finish_time,status,training_name,group_number,trainer_number) ON training
TO manager;

-- менеджер может всё обновлять в тренировке
CREATE POLICY update_train ON training
	FOR UPDATE
	TO manager
	USING(true)
	WITH CHECK (status = false);

-- политика на просмотр спортинвентаря
CREATE POLICY browse_equip ON sport_equipment
	FOR SELECT
	TO manager
	USING (true);

-- политика менеджеру для добавления тренировок
CREATE POLICY insert_train ON training
	FOR INSERT
	TO manager
	WITH CHECK (true);

--менеджеры могут смотреть все тренировки
CREATE POLICY browse_all_train ON training
FOR SELECT
TO manager
USING(true);

-- Добавлять новые задания могут только менеджеры
GRANT INSERT ON training,sport_equip_training
	TO manager;

--политика на просмотр работников
CREATE POLICY browse_employee ON employee
	FOR SELECT
	TO manager
	USING (true);

--политика на просмотр промежуточ таблицы тренировки и инвентаря
CREATE POLICY browse_sport_equip_train ON sport_equip_training
	FOR SELECT
	TO manager
	USING (true);

--политика на удаление данных из промежуточ таблицы тренировки и инвентаря
CREATE POLICY delete_train_sport_equip_training ON sport_equip_training
	FOR DELETE
	TO manager
	USING(true);

--политика на добавление данных в промежуточ таблицу тренировки и инвентаря
CREATE POLICY insert_train_sport_equip_training ON sport_equip_training
	FOR INSERT
	TO manager
	WITH CHECK (true);

/*политики и гранты тренера*/
--привелегия на просмотр таблц
GRANT SELECT ON training, employee,sport_equip_training, sport_equipment, position_emp TO trainer;

-- привилегии на изменение тренировок для тренера
GRANT UPDATE (start_time, finish_time,status) ON training
TO trainer;

--политика чтобы тренер мог смотреть спортинвентарь
CREATE POLICY browse_equip_trainer ON sport_equipment
	FOR SELECT
	TO trainer
	USING (true);

-- Политика для того, чтобы тренер мог просматривать свои задания
CREATE POLICY browse_my_train ON training
	FOR SELECT
	TO trainer
	USING (
		(
			SELECT employee_login FROM employee
			WHERE (employee_number = trainer_number)
		) = CURRENT_USER
);

--тренер видит только себя в списке работников
CREATE POLICY browse_myself_from_employee ON employee
	FOR SELECT
	TO trainer
	USING (employee_login = CURRENT_USER);

--политика для тренера на просмотр экипировки только для своей тренировки
CREATE POLICY browse_my_equip_for_trainer ON sport_equip_training
	FOR SELECT
	TO trainer
	USING (
			(SELECT employee_Login FROM employee
		JOIN training ON training.trainer_number = employee.employee_number
		WHERE sport_equip_training.training_number = training.training_number) = CURRENT_USER

	);

-- Политика для тренера изменять только его тренировку
CREATE POLICY update_my_train ON training
	FOR UPDATE
	TO trainer
	USING(true)
	WITH CHECK(
		(
			SELECT employee_login FROM employee
			WHERE (employee_number = trainer_number)
		) = CURRENT_USER
		AND
		status = false
);

--тренер может удалять только свои тренировки
CREATE POLICY delete_my_train ON training
	FOR DELETE
	TO trainer
	USING(
		(
			SELECT employee_login FROM employee
			WHERE (employee_number = trainer_number)
		) = CURRENT_USER
);

-- ФУНКЦИИ И ПРОЦЕДУРЫ ---
-- процедура добавления новых работников
CREATE EXTENSION IF NOT EXISTS pgcrypto;
CREATE PROCEDURE create_user(employee_firstname varchar(50),employee_surname varchar(50),employee_lastname varchar(50),
	employee_email varchar(40),employee_phone numeric(11),employee_log varchar(30),employee_password text,
	employee_expirience integer, position_id integer) AS $$
DECLARE given_role TEXT;
BEGIN
	IF (SELECT COUNT(*) FROM pg_roles WHERE rolname = employee_log) THEN
		RAISE EXCEPTION 'Такой пользователь уже есть.';
	ELSE
		INSERT INTO employee(employee_firstname,employee_surname,employee_lastname,
							employee_email, employee_phone, employee_login,employee_password,
							employee_expirience,position_number)
		VALUES(employee_firstname,employee_surname,employee_lastname,
							employee_email, employee_phone, employee_log,
			  crypt(employee_password, gen_salt('bf')), employee_expirience,position_id);
		EXECUTE format('CREATE ROLE %I WITH LOGIN PASSWORD %L', employee_log, employee_password);
		given_role := (SELECT position_name FROM position_emp WHERE
					   position_number = (SELECT position_number FROM employee WHERE employee_login = employee_log));
		EXECUTE FORMAT('GRANT %I TO %I', given_role, employee_log);
		EXECUTE FORMAT('GRANT CONNECT ON DATABASE sportorg TO %I', employee_log);
	END IF;
	END;
	$$ LANGUAGE plpgsql
	SECURITY DEFINER;
GRANT EXECUTE ON PROCEDURE create_user TO administrator;

-- процедура добавления спорт. оборудования
CREATE PROCEDURE add_equip(
	IN sport_equip_name varchar(30),
	IN sport_equip_vendore_code integer,
	IN sport_equip_amount integer)
LANGUAGE SQL
AS $body$
	INSERT INTO sport_equipment(sport_equip_name,sport_equip_vendore_code,sport_equip_amount)
	VALUES (sport_equip_name,sport_equip_vendore_code,sport_equip_amount);
$body$;
GRANT EXECUTE ON PROCEDURE add_equip TO administrator;

-- Функция добавления новой тренировки
CREATE PROCEDURE add_training(
	IN start_tim timestamp,
	IN finish_tim timestamp,
	IN training_name varchar(50),
	IN group_numbe integer,
	IN trainer_numbe integer,
	IN sport_numb integer)
LANGUAGE plpgsql
AS $$
DECLARE train_id INTEGER;
BEGIN
	INSERT INTO training(start_time,
				   finish_time, training_name,group_number, trainer_number)
	VALUES (start_tim,finish_tim, training_name,group_numbe, trainer_numbe);
	train_id := (SELECT training_number FROM training WHERE (start_time = start_tim
	AND group_number = group_numbe AND finish_time = finish_tim AND trainer_number = trainer_numbe));
	INSERT INTO sport_equip_training(sport_equip_number, training_number)
	VALUES (sport_numb, train_id);
	IF ((SELECT COUNT(*) FROM training WHERE training_number = train_id)=1 AND
		(SELECT COUNT(*) FROM sport_equip_training WHERE training_number = train_id)=1) THEN
		COMMIT;
	ELSE
		ROLLBACK;
	END IF;
END;
$$;
GRANT EXECUTE ON PROCEDURE add_training TO manager,administrator;

-- Транзакция с добавлением клиента и добавлением в табличку с группой
CREATE PROCEDURE add_client_transaction(
	IN client_firstname varchar(50),
	IN client_surname varchar(50),
	IN client_lastname varchar(50),
	IN client_phone numeric(11),
	IN client_mail varchar(30),
	IN client_address text,
	IN client_date_birthday date,
	IN id_group integer)
LANGUAGE plpgsql
AS $$
DECLARE id_client integer;
BEGIN
	INSERT INTO client(client_firstname, client_surname,
				   client_lastname, client_phone, client_email,client_address, client_date_birthday)
	VALUES (client_firstname, client_surname,client_lastname, client_phone, client_mail,client_address, client_date_birthday);

	id_client := (SELECT client_number FROM client WHERE client_email = client_mail);
	INSERT INTO client_group_table(group_number, client_number) VALUES (id_group, id_client);
	IF (((SELECT COUNT(*) FROM client WHERE client_email = client_mail) = 1)
		AND ((SELECT COUNT(*) FROM client_group_table WHERE client_number = id_client)=1)) THEN
		COMMIT;
	ELSE
		ROLLBACK;
	END IF;
END;
$$;
GRANT EXECUTE ON PROCEDURE add_client_transaction TO administrator;

-- процедура добавления группы
CREATE OR REPLACE PROCEDURE add_group(
	IN group_name varchar(50),
	IN group_type varchar(50))
LANGUAGE SQL
AS $body$
	INSERT INTO sports_group(group_name,group_type)
	VALUES (group_name,group_type);
$body$;
GRANT EXECUTE ON PROCEDURE add_group TO administrator;

-- триггер на удаления тренировки и связи в промежуточ. таблице по истечении 1 дня
CREATE OR REPLACE FUNCTION delete_training_after_day() RETURNS trigger AS $$
BEGIN
	DELETE FROM sport_equip_training
	WHERE training_number = (SELECT training_number FROM training WHERE status = true
							 AND AGE(CURRENT_TIMESTAMP, finish_time) > INTERVAL '1 day');
	DELETE FROM training
	WHERE (status = true) AND AGE(CURRENT_TIMESTAMP, finish_time) > INTERVAL '1 day';
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER delete_training_after_day_trigger
AFTER UPDATE OF status ON training
FOR EACH STATEMENT
EXECUTE FUNCTION delete_training_after_day();

GRANT EXECUTE ON FUNCTION delete_training_after_day TO manager,trainer, administrator;

-- транзакция удаления пользователя и связи в промежуточной таблице
CREATE PROCEDURE delete_client_relationchip(IN client_numb integer) AS $$
BEGIN
	DELETE FROM client_group_table
	WHERE client_number = client_numb;
	DELETE FROM client
	WHERE client_number = client_numb;
	IF ((SELECT COUNT(*) FROM client_group_table WHERE client_number = client_numb) = 1
		OR (SELECT COUNT(*) FROM client WHERE client_number = client_numb) = 1) THEN
		ROLLBACK;
	ELSE
		COMMIT;
	END IF;
END;
$$ LANGUAGE plpgsql;

GRANT EXECUTE ON PROCEDURE delete_client_relationchip TO administrator;

-- Функция удаления работника и его роли из бд
SET ROLE postgres;
CREATE FUNCTION delete_employee_and_role(IN employee_numb integer, IN employee_log varchar) RETURNS void AS $$
BEGIN
	EXECUTE FORMAT('REVOKE ALL PRIVILEGES ON DATABASE sportorg FROM %I', employee_log);
	DELETE FROM employee
	WHERE employee_number = employee_numb;
	EXECUTE FORMAT('DROP ROLE %I',employee_log);
END;
$$ LANGUAGE plpgsql
SECURITY DEFINER;
GRANT EXECUTE ON FUNCTION delete_employee_and_role TO administrator;

-- функция для автоматического завершения тренировки по её окончании
CREATE FUNCTION set_status_training() RETURNS trigger AS $$
BEGIN
	UPDATE training SET status = true WHERE ((CURRENT_TIMESTAMP > finish_time) AND (status = false));
	RETURN NULL;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER set_status_training_trigger
AFTER UPDATE OF finish_time OR INSERT ON training
FOR EACH STATEMENT
EXECUTE FUNCTION set_status_training();

GRANT EXECUTE ON FUNCTION set_status_training TO manager,trainer, administrator;

--представление для отображения группы и количества человек в ней
CREATE VIEW vieww AS
SELECT sg.group_number, group_type, group_name, count_people
FROM sports_group sg
LEFT JOIN (SELECT group_number, COUNT(client_number) AS count_people
											  FROM client_group_table GROUP BY group_number) AS cgt
											  ON sg.group_number = cgt.group_number;

GRANT SELECT ON vieww TO administrator;

--представление для отображения спорт. оборудования у тренировки
CREATE VIEW equip_train_view AS
SELECT training_number,sport_equip_name FROM sport_equip_training
					LEFT JOIN sport_equipment USING(sport_equip_number);

GRANT SELECT ON equip_train_view TO manager, trainer, administrator;

--представление для отображения группы у клиента
CREATE VIEW group_client AS SELECT group_name, client_number FROM client_group_table
JOIN sports_group USING(group_number);

GRANT SELECT ON group_client TO administrator;

-- Индекс для поиска клиентов
CREATE INDEX client_id_ind ON client(client_number);

-- Процедура выгрузки отчета по тренировкам в формате csv
CREATE OR REPLACE PROCEDURE export_data_training_csv(start_training timestamp, end_training timestamp, path_file text)
AS $$
DECLARE
	save_values text; -- команда сохранения подсчитанных данных
	all_training int; -- все задания сотрудника
	completed_training int; -- задания, выполненные в срок
	uncomplet_training int; -- незавершенные и просроченные задания
BEGIN
	all_training := (SELECT COUNT(*) FROM training
				 WHERE (finish_time >= start_training)
				 AND (finish_time <= end_training));

completed_training := (SELECT COUNT(*) FROM training
						  WHERE (status IS TRUE)
						  AND (finish_time >= start_training)
				 		  AND (finish_time <= end_training));

uncomplet_training := (SELECT COUNT(*) FROM training
						  WHERE (status IS FALSE)
						  AND (finish_time >= start_training)
						  AND (finish_time <= end_training));


save_values := format('COPY (SELECT %L AS all_training,
					  %L AS completed_training,
					  %L AS uncomplet_training)
					  TO %L CSV HEADER;',
					  all_training, completed_training,
					  uncomplet_training, path_file
					 );
EXECUTE save_values;
END $$
LANGUAGE plpgsql;
GRANT EXECUTE ON PROCEDURE export_data_training_csv TO administrator, manager;

INSERT INTO position_emp(position_number,position_name)
VALUES (1, 'manager'),(2,'trainer'),(3,'administrator');

INSERT INTO sports_group(group_name,group_type)
VALUES ('Хайкью 1-22','Волейбол'),
		('Хайкью 2-22','Волейбол'),
		('НеХайкью 1-22','Баскетбол'),
		('СноваНеХайкью 1-21','Теннис');

INSERT INTO sport_equipment(sport_equip_name, sport_equip_vendore_code,sport_equip_amount)
VALUES ('Волейбольные мячи', 249048, 356),
		('Баскетбольные мячи', 249048, 289),
		('Тенисные ракетки', 212094, 175),
		('Ракетки для пинг-понга', 709812,200),
		('Футбольные мячи', 249048,195);

--вставляет тренеров и менеджеров
CALL create_user ('Райдэн','Эи','Архонт','raiden@hot.com',87770912381,'raidenM','sheirikf133ks',10,2);
CALL create_user('Идзуку','GoodBoy', 'Мидория', 'deku1@hero.com', 8109283940,'idzukuK', 'xmm328dj3', 2, 2);
CALL create_user('Феликс','Ли', 'Ёнбок', 'handsomeboy@korea.com', 88290381741,'felixBoy', '290vckdk4s', 10, 1);
CALL create_user('Кристофер','Бан','Чан','cristopher@gmail.com',81111111098,'cristopherBangChan','34cnjdfh3',6,3);
CALL create_user('Арсений','Попов','Сергеевич','arkeniy@gmail.com',87676767890,'arslover','44jfkk3f',6,2);


--вставляет клиентов и тренировки
CALL add_client_transaction ('Инокентий', 'Васильев','Иванович',193047343,'vbgfdd@gmail.com', 'г. Аткарск, ул. Красногвардейцев д. 25', '1990-04-12',1);
CALL add_client_transaction ('Илья', 'Иванов','Васильевич',19304758231,'prettyboy@gmail.com', 'г. Москва, ул. Тверская д. 22', '1998-03-29',2);
CALL add_client_transaction('Скара','Му','Чача',89098329102,'scara@gays.com','г. Сумеру, ул. Сокровищ, д.1','2022-01-14',3);
CALL add_client_transaction('Нахида','Дендро','Мать',89098311102,'nahida@arhont.com','г. Сумеру, ул. Снов, д.2','1990-11-12',4);
CALL add_training('2022-12-23 19:16:00',' 2022-12-23 19:17:50', 'Подготовка к соревнованиям между собой',2, 5,1);
CALL add_training ('2022-12-24 12:00:00','2022-12-24 13:00:00','Отработка подачи мяча',1,3,3);
CALL add_training('2022-12-24 01:56:00','2022-12-24 01:57:50','Тренировка трехочкового броска',3,2,2);



